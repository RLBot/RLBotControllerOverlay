// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var rlbot = rlbot || {};

/**
 * @const
 * @namespace
 */
rlbot.flat = rlbot.flat || {};

/**
 * @enum
 */
rlbot.flat.CollisionShape = {
  NONE: 0,
  BoxShape: 1,
  SphereShape: 2,
  CylinderShape: 3
};

/**
 * @enum
 */
rlbot.flat.TileState = {
  Unknown: 0,

  /**
   * The default state of the tiles.
   */
  Filled: 1,

  /**
   * The state when a tile has been damaged.
   */
  Damaged: 2,

  /**
   * The state of a tile when it is open and a goal can be scored.
   */
  Open: 3
};

/**
 * @enum
 */
rlbot.flat.RenderType = {
  DrawLine2D: 1,
  DrawLine3D: 2,
  DrawLine2D_3D: 3,
  DrawRect2D: 4,
  DrawRect3D: 5,
  DrawString2D: 6,
  DrawString3D: 7,
  DrawCenteredRect3D: 8
};

/**
 * @enum
 */
rlbot.flat.QuickChatSelection = {
  Information_IGotIt: 0,
  Information_NeedBoost: 1,
  Information_TakeTheShot: 2,
  Information_Defending: 3,
  Information_GoForIt: 4,
  Information_Centering: 5,
  Information_AllYours: 6,
  Information_InPosition: 7,
  Information_Incoming: 8,
  Compliments_NiceShot: 9,
  Compliments_GreatPass: 10,
  Compliments_Thanks: 11,
  Compliments_WhatASave: 12,
  Compliments_NiceOne: 13,
  Compliments_WhatAPlay: 14,
  Compliments_GreatClear: 15,
  Compliments_NiceBlock: 16,
  Reactions_OMG: 17,
  Reactions_Noooo: 18,
  Reactions_Wow: 19,
  Reactions_CloseOne: 20,
  Reactions_NoWay: 21,
  Reactions_HolyCow: 22,
  Reactions_Whew: 23,
  Reactions_Siiiick: 24,
  Reactions_Calculated: 25,
  Reactions_Savage: 26,
  Reactions_Okay: 27,
  Apologies_Cursing: 28,
  Apologies_NoProblem: 29,
  Apologies_Whoops: 30,
  Apologies_Sorry: 31,
  Apologies_MyBad: 32,
  Apologies_Oops: 33,
  Apologies_MyFault: 34,
  PostGame_Gg: 35,
  PostGame_WellPlayed: 36,
  PostGame_ThatWasFun: 37,
  PostGame_Rematch: 38,
  PostGame_OneMoreGame: 39,
  PostGame_WhatAGame: 40,
  PostGame_NiceMoves: 41,
  PostGame_EverybodyDance: 42,

  /**
   * Custom text chats made by bot makers
   */
  MaxPysonixQuickChatPresets: 43,

  /**
   * Waste of CPU cycles
   */
  Custom_Toxic_WasteCPU: 44,

  /**
   * Git gud*
   */
  Custom_Toxic_GitGut: 45,

  /**
   * De-Allocate Yourself
   */
  Custom_Toxic_DeAlloc: 46,

  /**
   * 404: Your skill not found
   */
  Custom_Toxic_404NoSkill: 47,

  /**
   * Get a virus
   */
  Custom_Toxic_CatchVirus: 48,

  /**
   * Passing!
   */
  Custom_Useful_Passing: 49,

  /**
   * Faking!
   */
  Custom_Useful_Faking: 50,

  /**
   * Demoing!
   */
  Custom_Useful_Demoing: 51,

  /**
   * BOOPING
   */
  Custom_Useful_Bumping: 52,

  /**
   * The chances of that was 47525 to 1*
   */
  Custom_Compliments_TinyChances: 53,

  /**
   * Who upped your skill level?
   */
  Custom_Compliments_SkillLevel: 54,

  /**
   * Your programmer should be proud
   */
  Custom_Compliments_proud: 55,

  /**
   * You're the GC of Bots
   */
  Custom_Compliments_GC: 56,

  /**
   * Are you <Insert Pro>Bot? *
   */
  Custom_Compliments_Pro: 57,

  /**
   * Lag
   */
  Custom_Excuses_Lag: 58,

  /**
   * Ghost inputs
   */
  Custom_Excuses_GhostInputs: 59,

  /**
   * RIGGED
   */
  Custom_Excuses_Rigged: 60,

  /**
   * Mafia plays!
   */
  Custom_Toxic_MafiaPlays: 61,

  /**
   * Yeet!
   */
  Custom_Exclamation_Yeet: 62
};

/**
 * @enum
 */
rlbot.flat.PlayerClass = {
  NONE: 0,
  RLBotPlayer: 1,
  HumanPlayer: 2,
  PsyonixBotPlayer: 3,
  PartyMemberBotPlayer: 4
};

/**
 * @enum
 */
rlbot.flat.GameMode = {
  Soccer: 0,
  Hoops: 1,
  Dropshot: 2,
  Hockey: 3,
  Rumble: 4,
  Heatseeker: 5
};

/**
 * @enum
 */
rlbot.flat.GameMap = {
  DFHStadium: 0,
  Mannfield: 1,
  ChampionsField: 2,
  UrbanCentral: 3,
  BeckwithPark: 4,
  UtopiaColiseum: 5,
  Wasteland: 6,
  NeoTokyo: 7,
  AquaDome: 8,
  StarbaseArc: 9,
  Farmstead: 10,
  SaltyShores: 11,
  DFHStadium_Stormy: 12,
  DFHStadium_Day: 13,
  Mannfield_Stormy: 14,
  Mannfield_Night: 15,
  ChampionsField_Day: 16,
  BeckwithPark_Stormy: 17,
  BeckwithPark_Midnight: 18,
  UrbanCentral_Night: 19,
  UrbanCentral_Dawn: 20,
  UtopiaColiseum_Dusk: 21,
  DFHStadium_Snowy: 22,
  Mannfield_Snowy: 23,
  UtopiaColiseum_Snowy: 24,
  Badlands: 25,
  Badlands_Night: 26,
  TokyoUnderpass: 27,
  Arctagon: 28,
  Pillars: 29,
  Cosmic: 30,
  DoubleGoal: 31,
  Octagon: 32,
  Underpass: 33,
  UtopiaRetro: 34,
  Hoops_DunkHouse: 35,
  DropShot_Core707: 36,
  ThrowbackStadium: 37,
  ForbiddenTemple: 38,
  RivalsArena: 39,
  Farmstead_Night: 40,
  SaltyShores_Night: 41
};

/**
 * @enum
 */
rlbot.flat.MatchLength = {
  Five_Minutes: 0,
  Ten_Minutes: 1,
  Twenty_Minutes: 2,
  Unlimited: 3
};

/**
 * @enum
 */
rlbot.flat.MaxScore = {
  Unlimited: 0,
  One_Goal: 1,
  Three_Goals: 2,
  Five_Goals: 3
};

/**
 * @enum
 */
rlbot.flat.OvertimeOption = {
  Unlimited: 0,
  Five_Max_First_Score: 1,
  Five_Max_Random_Team: 2
};

/**
 * @enum
 */
rlbot.flat.SeriesLengthOption = {
  Unlimited: 0,
  Three_Games: 1,
  Five_Games: 2,
  Seven_Games: 3
};

/**
 * @enum
 */
rlbot.flat.GameSpeedOption = {
  Default: 0,
  Slo_Mo: 1,
  Time_Warp: 2
};

/**
 * @enum
 */
rlbot.flat.BallMaxSpeedOption = {
  Default: 0,
  Slow: 1,
  Fast: 2,
  Super_Fast: 3
};

/**
 * @enum
 */
rlbot.flat.BallTypeOption = {
  Default: 0,
  Cube: 1,
  Puck: 2,
  Basketball: 3
};

/**
 * @enum
 */
rlbot.flat.BallWeightOption = {
  Default: 0,
  Light: 1,
  Heavy: 2,
  Super_Light: 3
};

/**
 * @enum
 */
rlbot.flat.BallSizeOption = {
  Default: 0,
  Small: 1,
  Large: 2,
  Gigantic: 3
};

/**
 * @enum
 */
rlbot.flat.BallBouncinessOption = {
  Default: 0,
  Low: 1,
  High: 2,
  Super_High: 3
};

/**
 * @enum
 */
rlbot.flat.BoostOption = {
  Normal_Boost: 0,
  Unlimited_Boost: 1,
  Slow_Recharge: 2,
  Rapid_Recharge: 3,
  No_Boost: 4
};

/**
 * @enum
 */
rlbot.flat.RumbleOption = {
  No_Rumble: 0,
  Default: 1,
  Slow: 2,
  Civilized: 3,
  Destruction_Derby: 4,
  Spring_Loaded: 5,
  Spikes_Only: 6,
  Spike_Rush: 7
};

/**
 * @enum
 */
rlbot.flat.BoostStrengthOption = {
  One: 0,
  OneAndAHalf: 1,
  Two: 2,
  Ten: 3
};

/**
 * @enum
 */
rlbot.flat.GravityOption = {
  Default: 0,
  Low: 1,
  High: 2,
  Super_High: 3
};

/**
 * @enum
 */
rlbot.flat.DemolishOption = {
  Default: 0,
  Disabled: 1,
  Friendly_Fire: 2,
  On_Contact: 3,
  On_Contact_FF: 4
};

/**
 * @enum
 */
rlbot.flat.RespawnTimeOption = {
  Three_Seconds: 0,
  Two_Seconds: 1,
  One_Seconds: 2,
  Disable_Goal_Reset: 3
};

/**
 * @enum
 */
rlbot.flat.ExistingMatchBehavior = {
  /**
   * Restart the match if any match settings differ. This is the default because old RLBot always worked this way.
   */
  Restart_If_Different: 0,

  /**
   * Always restart the match, even if config is identical
   */
  Restart: 1,

  /**
   * Never restart an existing match, just try to remove or spawn cars to match the configuration.
   * If we are not in the middle of a match, a match will be started. Handy for LAN matches.
   */
  Continue_And_Spawn: 2
};

/**
 * @enum
 */
rlbot.flat.GameMessage = {
  NONE: 0,
  PlayerStatEvent: 1,
  PlayerSpectate: 2,
  PlayerInputChange: 3
};

/**
 * @constructor
 */
rlbot.flat.ControllerState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ControllerState}
 */
rlbot.flat.ControllerState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState}
 */
rlbot.flat.ControllerState.getRootAsControllerState = function(bb, obj) {
  return (obj || new rlbot.flat.ControllerState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * -1 for full reverse, 1 for full forward
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.throttle = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.steer = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for nose down, 1 for nose up
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.pitch = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for roll left, 1 for roll right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.roll = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * true if you want to press the jump button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.jump = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the boost button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the handbrake button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.handbrake = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the 'use item' button, used in rumble etc.
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.useItem = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ControllerState.startControllerState = function(builder) {
  builder.startObject(9);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} throttle
 */
rlbot.flat.ControllerState.addThrottle = function(builder, throttle) {
  builder.addFieldFloat32(0, throttle, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} steer
 */
rlbot.flat.ControllerState.addSteer = function(builder, steer) {
  builder.addFieldFloat32(1, steer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 */
rlbot.flat.ControllerState.addPitch = function(builder, pitch) {
  builder.addFieldFloat32(2, pitch, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
rlbot.flat.ControllerState.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(3, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roll
 */
rlbot.flat.ControllerState.addRoll = function(builder, roll) {
  builder.addFieldFloat32(4, roll, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} jump
 */
rlbot.flat.ControllerState.addJump = function(builder, jump) {
  builder.addFieldInt8(5, +jump, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} boost
 */
rlbot.flat.ControllerState.addBoost = function(builder, boost) {
  builder.addFieldInt8(6, +boost, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} handbrake
 */
rlbot.flat.ControllerState.addHandbrake = function(builder, handbrake) {
  builder.addFieldInt8(7, +handbrake, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} useItem
 */
rlbot.flat.ControllerState.addUseItem = function(builder, useItem) {
  builder.addFieldInt8(8, +useItem, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ControllerState.endControllerState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PlayerInput = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerInput}
 */
rlbot.flat.PlayerInput.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerInput=} obj
 * @returns {rlbot.flat.PlayerInput}
 */
rlbot.flat.PlayerInput.getRootAsPlayerInput = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerInput).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInput.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState|null}
 */
rlbot.flat.PlayerInput.prototype.controllerState = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerInput.startPlayerInput = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.PlayerInput.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controllerStateOffset
 */
rlbot.flat.PlayerInput.addControllerState = function(builder, controllerStateOffset) {
  builder.addFieldOffset(1, controllerStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerInput.endPlayerInput = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Vector3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Vector3}
 */
rlbot.flat.Vector3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Vector3.createVector3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * Expresses the rotation state of an object in Euler angles, with values in radians.
 *
 * @constructor
 */
rlbot.flat.Rotator = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Rotator}
 */
rlbot.flat.Rotator.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.pitch = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.yaw = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.roll = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 * @param {number} yaw
 * @param {number} roll
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Rotator.createRotator = function(builder, pitch, yaw, roll) {
  builder.prep(4, 12);
  builder.writeFloat32(roll);
  builder.writeFloat32(yaw);
  builder.writeFloat32(pitch);
  return builder.offset();
};

/**
 * Expresses the rotation state of an object.
 * Learn about quaternions here: https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
 * You can tinker with them here to build an intuition: https://quaternions.online/
 *
 * @constructor
 */
rlbot.flat.Quaternion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Quaternion}
 */
rlbot.flat.Quaternion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Quaternion.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
rlbot.flat.Quaternion.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
rlbot.flat.Quaternion.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @returns {number}
 */
rlbot.flat.Quaternion.prototype.w = function() {
  return this.bb.readFloat32(this.bb_pos + 12);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} w
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Quaternion.createQuaternion = function(builder, x, y, z, w) {
  builder.prep(4, 16);
  builder.writeFloat32(w);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.BoxShape = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BoxShape}
 */
rlbot.flat.BoxShape.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BoxShape=} obj
 * @returns {rlbot.flat.BoxShape}
 */
rlbot.flat.BoxShape.getRootAsBoxShape = function(bb, obj) {
  return (obj || new rlbot.flat.BoxShape).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.BoxShape.prototype.length = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.BoxShape.prototype.width = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.BoxShape.prototype.height = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BoxShape.startBoxShape = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} length
 */
rlbot.flat.BoxShape.addLength = function(builder, length) {
  builder.addFieldFloat32(0, length, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} width
 */
rlbot.flat.BoxShape.addWidth = function(builder, width) {
  builder.addFieldFloat32(1, width, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} height
 */
rlbot.flat.BoxShape.addHeight = function(builder, height) {
  builder.addFieldFloat32(2, height, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BoxShape.endBoxShape = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.SphereShape = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.SphereShape}
 */
rlbot.flat.SphereShape.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.SphereShape=} obj
 * @returns {rlbot.flat.SphereShape}
 */
rlbot.flat.SphereShape.getRootAsSphereShape = function(bb, obj) {
  return (obj || new rlbot.flat.SphereShape).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.SphereShape.prototype.diameter = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.SphereShape.startSphereShape = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} diameter
 */
rlbot.flat.SphereShape.addDiameter = function(builder, diameter) {
  builder.addFieldFloat32(0, diameter, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.SphereShape.endSphereShape = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.CylinderShape = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.CylinderShape}
 */
rlbot.flat.CylinderShape.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.CylinderShape=} obj
 * @returns {rlbot.flat.CylinderShape}
 */
rlbot.flat.CylinderShape.getRootAsCylinderShape = function(bb, obj) {
  return (obj || new rlbot.flat.CylinderShape).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.CylinderShape.prototype.diameter = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.CylinderShape.prototype.height = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.CylinderShape.startCylinderShape = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} diameter
 */
rlbot.flat.CylinderShape.addDiameter = function(builder, diameter) {
  builder.addFieldFloat32(0, diameter, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} height
 */
rlbot.flat.CylinderShape.addHeight = function(builder, height) {
  builder.addFieldFloat32(1, height, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.CylinderShape.endCylinderShape = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Touch = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Touch}
 */
rlbot.flat.Touch.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Touch=} obj
 * @returns {rlbot.flat.Touch}
 */
rlbot.flat.Touch.getRootAsTouch = function(bb, obj) {
  return (obj || new rlbot.flat.Touch).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of the player involved with the touch.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.Touch.prototype.playerName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Seconds that had elapsed in the game when the touch occurred.
 *
 * @returns {number}
 */
rlbot.flat.Touch.prototype.gameSeconds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The point of contact for the touch.
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Touch.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The direction of the touch.
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Touch.prototype.normal = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The Team which the touch belongs to, 0 for blue 1 for orange.
 *
 * @returns {number}
 */
rlbot.flat.Touch.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * The index of the player involved with the touch.
 *
 * @returns {number}
 */
rlbot.flat.Touch.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Touch.startTouch = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playerNameOffset
 */
rlbot.flat.Touch.addPlayerName = function(builder, playerNameOffset) {
  builder.addFieldOffset(0, playerNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameSeconds
 */
rlbot.flat.Touch.addGameSeconds = function(builder, gameSeconds) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.Touch.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(2, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} normalOffset
 */
rlbot.flat.Touch.addNormal = function(builder, normalOffset) {
  builder.addFieldStruct(3, normalOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.Touch.addTeam = function(builder, team) {
  builder.addFieldInt32(4, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.Touch.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(5, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Touch.endTouch = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.ScoreInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ScoreInfo}
 */
rlbot.flat.ScoreInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ScoreInfo=} obj
 * @returns {rlbot.flat.ScoreInfo}
 */
rlbot.flat.ScoreInfo.getRootAsScoreInfo = function(bb, obj) {
  return (obj || new rlbot.flat.ScoreInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.score = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.goals = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.ownGoals = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.assists = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.saves = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.shots = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.demolitions = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ScoreInfo.startScoreInfo = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} score
 */
rlbot.flat.ScoreInfo.addScore = function(builder, score) {
  builder.addFieldInt32(0, score, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} goals
 */
rlbot.flat.ScoreInfo.addGoals = function(builder, goals) {
  builder.addFieldInt32(1, goals, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} ownGoals
 */
rlbot.flat.ScoreInfo.addOwnGoals = function(builder, ownGoals) {
  builder.addFieldInt32(2, ownGoals, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} assists
 */
rlbot.flat.ScoreInfo.addAssists = function(builder, assists) {
  builder.addFieldInt32(3, assists, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} saves
 */
rlbot.flat.ScoreInfo.addSaves = function(builder, saves) {
  builder.addFieldInt32(4, saves, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} shots
 */
rlbot.flat.ScoreInfo.addShots = function(builder, shots) {
  builder.addFieldInt32(5, shots, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} demolitions
 */
rlbot.flat.ScoreInfo.addDemolitions = function(builder, demolitions) {
  builder.addFieldInt32(6, demolitions, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ScoreInfo.endScoreInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Physics = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Physics}
 */
rlbot.flat.Physics.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics}
 */
rlbot.flat.Physics.getRootAsPhysics = function(bb, obj) {
  return (obj || new rlbot.flat.Physics).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Rotator=} obj
 * @returns {rlbot.flat.Rotator|null}
 */
rlbot.flat.Physics.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.angularVelocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Physics.startPhysics = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.Physics.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.Physics.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.Physics.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVelocityOffset
 */
rlbot.flat.Physics.addAngularVelocity = function(builder, angularVelocityOffset) {
  builder.addFieldStruct(3, angularVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Physics.endPhysics = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PlayerInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.PlayerInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerInfo=} obj
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.PlayerInfo.getRootAsPlayerInfo = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics|null}
 */
rlbot.flat.PlayerInfo.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.ScoreInfo=} obj
 * @returns {rlbot.flat.ScoreInfo|null}
 */
rlbot.flat.PlayerInfo.prototype.scoreInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ScoreInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isDemolished = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.hasWheelContact = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isSupersonic = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isBot = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.jumped = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 *  True if player has double jumped. False does not mean you have a jump remaining, because the
 *  aerial timer can run out, and that doesn't affect this flag.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.doubleJumped = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.PlayerInfo.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInfo.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInfo.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.BoxShape=} obj
 * @returns {rlbot.flat.BoxShape|null}
 */
rlbot.flat.PlayerInfo.prototype.hitbox = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? (obj || new rlbot.flat.BoxShape).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.PlayerInfo.prototype.hitboxOffset = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * In the case where the requested player index is not available, spawnId will help
 * the framework figure out what index was actually assigned to this player instead.
 *
 * @returns {number}
 */
rlbot.flat.PlayerInfo.prototype.spawnId = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerInfo.startPlayerInfo = function(builder) {
  builder.startObject(14);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.PlayerInfo.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} scoreInfoOffset
 */
rlbot.flat.PlayerInfo.addScoreInfo = function(builder, scoreInfoOffset) {
  builder.addFieldOffset(1, scoreInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isDemolished
 */
rlbot.flat.PlayerInfo.addIsDemolished = function(builder, isDemolished) {
  builder.addFieldInt8(2, +isDemolished, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} hasWheelContact
 */
rlbot.flat.PlayerInfo.addHasWheelContact = function(builder, hasWheelContact) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isSupersonic
 */
rlbot.flat.PlayerInfo.addIsSupersonic = function(builder, isSupersonic) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isBot
 */
rlbot.flat.PlayerInfo.addIsBot = function(builder, isBot) {
  builder.addFieldInt8(5, +isBot, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} jumped
 */
rlbot.flat.PlayerInfo.addJumped = function(builder, jumped) {
  builder.addFieldInt8(6, +jumped, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} doubleJumped
 */
rlbot.flat.PlayerInfo.addDoubleJumped = function(builder, doubleJumped) {
  builder.addFieldInt8(7, +doubleJumped, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
rlbot.flat.PlayerInfo.addName = function(builder, nameOffset) {
  builder.addFieldOffset(8, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.PlayerInfo.addTeam = function(builder, team) {
  builder.addFieldInt32(9, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boost
 */
rlbot.flat.PlayerInfo.addBoost = function(builder, boost) {
  builder.addFieldInt32(10, boost, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hitboxOffset
 */
rlbot.flat.PlayerInfo.addHitbox = function(builder, hitboxOffset) {
  builder.addFieldOffset(11, hitboxOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hitboxOffsetOffset
 */
rlbot.flat.PlayerInfo.addHitboxOffset = function(builder, hitboxOffsetOffset) {
  builder.addFieldStruct(12, hitboxOffsetOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} spawnId
 */
rlbot.flat.PlayerInfo.addSpawnId = function(builder, spawnId) {
  builder.addFieldInt32(13, spawnId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerInfo.endPlayerInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DropShotBallInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DropShotBallInfo}
 */
rlbot.flat.DropShotBallInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DropShotBallInfo=} obj
 * @returns {rlbot.flat.DropShotBallInfo}
 */
rlbot.flat.DropShotBallInfo.getRootAsDropShotBallInfo = function(bb, obj) {
  return (obj || new rlbot.flat.DropShotBallInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.DropShotBallInfo.prototype.absorbedForce = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.DropShotBallInfo.prototype.damageIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.DropShotBallInfo.prototype.forceAccumRecent = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DropShotBallInfo.startDropShotBallInfo = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} absorbedForce
 */
rlbot.flat.DropShotBallInfo.addAbsorbedForce = function(builder, absorbedForce) {
  builder.addFieldFloat32(0, absorbedForce, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} damageIndex
 */
rlbot.flat.DropShotBallInfo.addDamageIndex = function(builder, damageIndex) {
  builder.addFieldInt32(1, damageIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} forceAccumRecent
 */
rlbot.flat.DropShotBallInfo.addForceAccumRecent = function(builder, forceAccumRecent) {
  builder.addFieldFloat32(2, forceAccumRecent, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DropShotBallInfo.endDropShotBallInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BallInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BallInfo}
 */
rlbot.flat.BallInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BallInfo=} obj
 * @returns {rlbot.flat.BallInfo}
 */
rlbot.flat.BallInfo.getRootAsBallInfo = function(bb, obj) {
  return (obj || new rlbot.flat.BallInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics|null}
 */
rlbot.flat.BallInfo.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Touch=} obj
 * @returns {rlbot.flat.Touch|null}
 */
rlbot.flat.BallInfo.prototype.latestTouch = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Touch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.DropShotBallInfo=} obj
 * @returns {rlbot.flat.DropShotBallInfo|null}
 */
rlbot.flat.BallInfo.prototype.dropShotInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.DropShotBallInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {rlbot.flat.CollisionShape}
 */
rlbot.flat.BallInfo.prototype.shapeType = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {rlbot.flat.CollisionShape} */ (this.bb.readUint8(this.bb_pos + offset)) : rlbot.flat.CollisionShape.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
rlbot.flat.BallInfo.prototype.shape = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BallInfo.startBallInfo = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.BallInfo.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} latestTouchOffset
 */
rlbot.flat.BallInfo.addLatestTouch = function(builder, latestTouchOffset) {
  builder.addFieldOffset(1, latestTouchOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dropShotInfoOffset
 */
rlbot.flat.BallInfo.addDropShotInfo = function(builder, dropShotInfoOffset) {
  builder.addFieldOffset(2, dropShotInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.CollisionShape} shapeType
 */
rlbot.flat.BallInfo.addShapeType = function(builder, shapeType) {
  builder.addFieldInt8(3, shapeType, rlbot.flat.CollisionShape.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shapeOffset
 */
rlbot.flat.BallInfo.addShape = function(builder, shapeOffset) {
  builder.addFieldOffset(4, shapeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BallInfo.endBallInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BoostPadState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.BoostPadState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BoostPadState=} obj
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.BoostPadState.getRootAsBoostPadState = function(bb, obj) {
  return (obj || new rlbot.flat.BoostPadState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * True if the boost can be picked up
 *
 * @returns {boolean}
 */
rlbot.flat.BoostPadState.prototype.isActive = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
 *
 * @returns {number}
 */
rlbot.flat.BoostPadState.prototype.timer = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BoostPadState.startBoostPadState = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isActive
 */
rlbot.flat.BoostPadState.addIsActive = function(builder, isActive) {
  builder.addFieldInt8(0, +isActive, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timer
 */
rlbot.flat.BoostPadState.addTimer = function(builder, timer) {
  builder.addFieldFloat32(1, timer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BoostPadState.endBoostPadState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DropshotTile = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DropshotTile}
 */
rlbot.flat.DropshotTile.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DropshotTile=} obj
 * @returns {rlbot.flat.DropshotTile}
 */
rlbot.flat.DropshotTile.getRootAsDropshotTile = function(bb, obj) {
  return (obj || new rlbot.flat.DropshotTile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The amount of damage the tile has sustained.
 *
 * @returns {rlbot.flat.TileState}
 */
rlbot.flat.DropshotTile.prototype.tileState = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.TileState} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.TileState.Unknown;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DropshotTile.startDropshotTile = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.TileState} tileState
 */
rlbot.flat.DropshotTile.addTileState = function(builder, tileState) {
  builder.addFieldInt8(0, tileState, rlbot.flat.TileState.Unknown);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DropshotTile.endDropshotTile = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GameInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GameInfo}
 */
rlbot.flat.GameInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GameInfo=} obj
 * @returns {rlbot.flat.GameInfo}
 */
rlbot.flat.GameInfo.getRootAsGameInfo = function(bb, obj) {
  return (obj || new rlbot.flat.GameInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.secondsElapsed = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.gameTimeRemaining = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isOvertime = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isUnlimitedTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True when cars are allowed to move, and during the pause menu. False during replays.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isRoundActive = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True when the clock is paused due to kickoff, but false during kickoff countdown. In other words, it is true
 * while cars can move during kickoff. Note that if both players sit still, game clock start and this will become false.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isKickoffPause = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * Turns true after final replay, the moment the 'winner' screen appears. Remains true during next match
 * countdown. Turns false again the moment the 'choose team' screen appears.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isMatchEnded = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.worldGravityZ = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * Game speed multiplier, 1.0 is regular game speed.
 *
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.gameSpeed = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * Tracks the number of physics frames the game has computed.
 * May increase by more than one across consecutive packets.
 * Data type will roll over after 207 days at 120Hz.
 *
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.frameNum = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GameInfo.startGameInfo = function(builder) {
  builder.startObject(10);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} secondsElapsed
 */
rlbot.flat.GameInfo.addSecondsElapsed = function(builder, secondsElapsed) {
  builder.addFieldFloat32(0, secondsElapsed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameTimeRemaining
 */
rlbot.flat.GameInfo.addGameTimeRemaining = function(builder, gameTimeRemaining) {
  builder.addFieldFloat32(1, gameTimeRemaining, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isOvertime
 */
rlbot.flat.GameInfo.addIsOvertime = function(builder, isOvertime) {
  builder.addFieldInt8(2, +isOvertime, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isUnlimitedTime
 */
rlbot.flat.GameInfo.addIsUnlimitedTime = function(builder, isUnlimitedTime) {
  builder.addFieldInt8(3, +isUnlimitedTime, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isRoundActive
 */
rlbot.flat.GameInfo.addIsRoundActive = function(builder, isRoundActive) {
  builder.addFieldInt8(4, +isRoundActive, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isKickoffPause
 */
rlbot.flat.GameInfo.addIsKickoffPause = function(builder, isKickoffPause) {
  builder.addFieldInt8(5, +isKickoffPause, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isMatchEnded
 */
rlbot.flat.GameInfo.addIsMatchEnded = function(builder, isMatchEnded) {
  builder.addFieldInt8(6, +isMatchEnded, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} worldGravityZ
 */
rlbot.flat.GameInfo.addWorldGravityZ = function(builder, worldGravityZ) {
  builder.addFieldFloat32(7, worldGravityZ, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameSpeed
 */
rlbot.flat.GameInfo.addGameSpeed = function(builder, gameSpeed) {
  builder.addFieldFloat32(8, gameSpeed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} frameNum
 */
rlbot.flat.GameInfo.addFrameNum = function(builder, frameNum) {
  builder.addFieldInt32(9, frameNum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameInfo.endGameInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.TeamInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TeamInfo}
 */
rlbot.flat.TeamInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TeamInfo=} obj
 * @returns {rlbot.flat.TeamInfo}
 */
rlbot.flat.TeamInfo.getRootAsTeamInfo = function(bb, obj) {
  return (obj || new rlbot.flat.TeamInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.TeamInfo.prototype.teamIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * number of goals scored.
 *
 * @returns {number}
 */
rlbot.flat.TeamInfo.prototype.score = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TeamInfo.startTeamInfo = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamIndex
 */
rlbot.flat.TeamInfo.addTeamIndex = function(builder, teamIndex) {
  builder.addFieldInt32(0, teamIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} score
 */
rlbot.flat.TeamInfo.addScore = function(builder, score) {
  builder.addFieldInt32(1, score, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TeamInfo.endTeamInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GameTickPacket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GameTickPacket}
 */
rlbot.flat.GameTickPacket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GameTickPacket=} obj
 * @returns {rlbot.flat.GameTickPacket}
 */
rlbot.flat.GameTickPacket.getRootAsGameTickPacket = function(bb, obj) {
  return (obj || new rlbot.flat.GameTickPacket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.PlayerInfo=} obj
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.GameTickPacket.prototype.players = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PlayerInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.playersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.BoostPadState=} obj
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.GameTickPacket.prototype.boostPadStates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.BoostPadState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.boostPadStatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.BallInfo=} obj
 * @returns {rlbot.flat.BallInfo|null}
 */
rlbot.flat.GameTickPacket.prototype.ball = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.BallInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.GameInfo=} obj
 * @returns {rlbot.flat.GameInfo|null}
 */
rlbot.flat.GameTickPacket.prototype.gameInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.GameInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {rlbot.flat.DropshotTile=} obj
 * @returns {rlbot.flat.DropshotTile}
 */
rlbot.flat.GameTickPacket.prototype.tileInformation = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.DropshotTile).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.tileInformationLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.TeamInfo=} obj
 * @returns {rlbot.flat.TeamInfo}
 */
rlbot.flat.GameTickPacket.prototype.teams = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new rlbot.flat.TeamInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.teamsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GameTickPacket.startGameTickPacket = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playersOffset
 */
rlbot.flat.GameTickPacket.addPlayers = function(builder, playersOffset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostPadStatesOffset
 */
rlbot.flat.GameTickPacket.addBoostPadStates = function(builder, boostPadStatesOffset) {
  builder.addFieldOffset(1, boostPadStatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createBoostPadStatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startBoostPadStatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballOffset
 */
rlbot.flat.GameTickPacket.addBall = function(builder, ballOffset) {
  builder.addFieldOffset(2, ballOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gameInfoOffset
 */
rlbot.flat.GameTickPacket.addGameInfo = function(builder, gameInfoOffset) {
  builder.addFieldOffset(3, gameInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} tileInformationOffset
 */
rlbot.flat.GameTickPacket.addTileInformation = function(builder, tileInformationOffset) {
  builder.addFieldOffset(4, tileInformationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createTileInformationVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startTileInformationVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamsOffset
 */
rlbot.flat.GameTickPacket.addTeams = function(builder, teamsOffset) {
  builder.addFieldOffset(5, teamsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createTeamsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startTeamsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.endGameTickPacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The state of a rigid body in Rocket League's physics engine.
 * This gets updated in time with the physics tick, not the rendering framerate.
 * The frame field will be incremented every time the physics engine ticks.
 *
 * @constructor
 */
rlbot.flat.RigidBodyState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RigidBodyState}
 */
rlbot.flat.RigidBodyState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RigidBodyState=} obj
 * @returns {rlbot.flat.RigidBodyState}
 */
rlbot.flat.RigidBodyState.getRootAsRigidBodyState = function(bb, obj) {
  return (obj || new rlbot.flat.RigidBodyState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.RigidBodyState.prototype.frame = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RigidBodyState.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Quaternion=} obj
 * @returns {rlbot.flat.Quaternion|null}
 */
rlbot.flat.RigidBodyState.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Quaternion).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RigidBodyState.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RigidBodyState.prototype.angularVelocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RigidBodyState.startRigidBodyState = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} frame
 */
rlbot.flat.RigidBodyState.addFrame = function(builder, frame) {
  builder.addFieldInt32(0, frame, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.RigidBodyState.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(1, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.RigidBodyState.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(2, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.RigidBodyState.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(3, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVelocityOffset
 */
rlbot.flat.RigidBodyState.addAngularVelocity = function(builder, angularVelocityOffset) {
  builder.addFieldStruct(4, angularVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RigidBodyState.endRigidBodyState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Rigid body state for a player / car in the game. Includes the latest
 * controller input, which is otherwise difficult to correlate with consequences.
 *
 * @constructor
 */
rlbot.flat.PlayerRigidBodyState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerRigidBodyState}
 */
rlbot.flat.PlayerRigidBodyState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerRigidBodyState=} obj
 * @returns {rlbot.flat.PlayerRigidBodyState}
 */
rlbot.flat.PlayerRigidBodyState.getRootAsPlayerRigidBodyState = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerRigidBodyState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.RigidBodyState=} obj
 * @returns {rlbot.flat.RigidBodyState|null}
 */
rlbot.flat.PlayerRigidBodyState.prototype.state = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RigidBodyState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState|null}
 */
rlbot.flat.PlayerRigidBodyState.prototype.input = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerRigidBodyState.startPlayerRigidBodyState = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stateOffset
 */
rlbot.flat.PlayerRigidBodyState.addState = function(builder, stateOffset) {
  builder.addFieldOffset(0, stateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputOffset
 */
rlbot.flat.PlayerRigidBodyState.addInput = function(builder, inputOffset) {
  builder.addFieldOffset(1, inputOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerRigidBodyState.endPlayerRigidBodyState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Rigid body state for the ball.
 *
 * @constructor
 */
rlbot.flat.BallRigidBodyState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BallRigidBodyState}
 */
rlbot.flat.BallRigidBodyState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BallRigidBodyState=} obj
 * @returns {rlbot.flat.BallRigidBodyState}
 */
rlbot.flat.BallRigidBodyState.getRootAsBallRigidBodyState = function(bb, obj) {
  return (obj || new rlbot.flat.BallRigidBodyState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.RigidBodyState=} obj
 * @returns {rlbot.flat.RigidBodyState|null}
 */
rlbot.flat.BallRigidBodyState.prototype.state = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RigidBodyState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BallRigidBodyState.startBallRigidBodyState = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stateOffset
 */
rlbot.flat.BallRigidBodyState.addState = function(builder, stateOffset) {
  builder.addFieldOffset(0, stateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BallRigidBodyState.endBallRigidBodyState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Contains all rigid body state information.
 *
 * @constructor
 */
rlbot.flat.RigidBodyTick = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RigidBodyTick}
 */
rlbot.flat.RigidBodyTick.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RigidBodyTick=} obj
 * @returns {rlbot.flat.RigidBodyTick}
 */
rlbot.flat.RigidBodyTick.getRootAsRigidBodyTick = function(bb, obj) {
  return (obj || new rlbot.flat.RigidBodyTick).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.BallRigidBodyState=} obj
 * @returns {rlbot.flat.BallRigidBodyState|null}
 */
rlbot.flat.RigidBodyTick.prototype.ball = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.BallRigidBodyState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {rlbot.flat.PlayerRigidBodyState=} obj
 * @returns {rlbot.flat.PlayerRigidBodyState}
 */
rlbot.flat.RigidBodyTick.prototype.players = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.PlayerRigidBodyState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.RigidBodyTick.prototype.playersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RigidBodyTick.startRigidBodyTick = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballOffset
 */
rlbot.flat.RigidBodyTick.addBall = function(builder, ballOffset) {
  builder.addFieldOffset(0, ballOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playersOffset
 */
rlbot.flat.RigidBodyTick.addPlayers = function(builder, playersOffset) {
  builder.addFieldOffset(1, playersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RigidBodyTick.createPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.RigidBodyTick.startPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RigidBodyTick.endRigidBodyTick = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GoalInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.GoalInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GoalInfo=} obj
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.GoalInfo.getRootAsGoalInfo = function(bb, obj) {
  return (obj || new rlbot.flat.GoalInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.GoalInfo.prototype.teamNum = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.GoalInfo.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.GoalInfo.prototype.direction = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GoalInfo.prototype.width = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.GoalInfo.prototype.height = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GoalInfo.startGoalInfo = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamNum
 */
rlbot.flat.GoalInfo.addTeamNum = function(builder, teamNum) {
  builder.addFieldInt32(0, teamNum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.GoalInfo.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(1, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} directionOffset
 */
rlbot.flat.GoalInfo.addDirection = function(builder, directionOffset) {
  builder.addFieldStruct(2, directionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} width
 */
rlbot.flat.GoalInfo.addWidth = function(builder, width) {
  builder.addFieldFloat32(3, width, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} height
 */
rlbot.flat.GoalInfo.addHeight = function(builder, height) {
  builder.addFieldFloat32(4, height, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GoalInfo.endGoalInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BoostPad = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.BoostPad.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BoostPad=} obj
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.BoostPad.getRootAsBoostPad = function(bb, obj) {
  return (obj || new rlbot.flat.BoostPad).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.BoostPad.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.BoostPad.prototype.isFullBoost = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BoostPad.startBoostPad = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.BoostPad.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isFullBoost
 */
rlbot.flat.BoostPad.addIsFullBoost = function(builder, isFullBoost) {
  builder.addFieldInt8(1, +isFullBoost, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BoostPad.endBoostPad = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.FieldInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.FieldInfo}
 */
rlbot.flat.FieldInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.FieldInfo=} obj
 * @returns {rlbot.flat.FieldInfo}
 */
rlbot.flat.FieldInfo.getRootAsFieldInfo = function(bb, obj) {
  return (obj || new rlbot.flat.FieldInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.BoostPad=} obj
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.FieldInfo.prototype.boostPads = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.BoostPad).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.FieldInfo.prototype.boostPadsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.GoalInfo=} obj
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.FieldInfo.prototype.goals = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.GoalInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.FieldInfo.prototype.goalsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.FieldInfo.startFieldInfo = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostPadsOffset
 */
rlbot.flat.FieldInfo.addBoostPads = function(builder, boostPadsOffset) {
  builder.addFieldOffset(0, boostPadsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.createBoostPadsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.FieldInfo.startBoostPadsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} goalsOffset
 */
rlbot.flat.FieldInfo.addGoals = function(builder, goalsOffset) {
  builder.addFieldOffset(1, goalsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.createGoalsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.FieldInfo.startGoalsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.endFieldInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Float = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Float}
 */
rlbot.flat.Float.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Float.prototype.val = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} val
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Float.createFloat = function(builder, val) {
  builder.prep(4, 4);
  builder.writeFloat32(val);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.Bool = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Bool}
 */
rlbot.flat.Bool.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {boolean}
 */
rlbot.flat.Bool.prototype.val = function() {
  return !!this.bb.readInt8(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} val
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Bool.createBool = function(builder, val) {
  builder.prep(1, 1);
  builder.writeInt8(+val);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.Vector3Partial = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Vector3Partial}
 */
rlbot.flat.Vector3Partial.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial}
 */
rlbot.flat.Vector3Partial.getRootAsVector3Partial = function(bb, obj) {
  return (obj || new rlbot.flat.Vector3Partial).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.x = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.y = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.z = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Vector3Partial.startVector3Partial = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} xOffset
 */
rlbot.flat.Vector3Partial.addX = function(builder, xOffset) {
  builder.addFieldStruct(0, xOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} yOffset
 */
rlbot.flat.Vector3Partial.addY = function(builder, yOffset) {
  builder.addFieldStruct(1, yOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} zOffset
 */
rlbot.flat.Vector3Partial.addZ = function(builder, zOffset) {
  builder.addFieldStruct(2, zOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Vector3Partial.endVector3Partial = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RotatorPartial = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RotatorPartial}
 */
rlbot.flat.RotatorPartial.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RotatorPartial=} obj
 * @returns {rlbot.flat.RotatorPartial}
 */
rlbot.flat.RotatorPartial.getRootAsRotatorPartial = function(bb, obj) {
  return (obj || new rlbot.flat.RotatorPartial).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.pitch = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.yaw = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.roll = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RotatorPartial.startRotatorPartial = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pitchOffset
 */
rlbot.flat.RotatorPartial.addPitch = function(builder, pitchOffset) {
  builder.addFieldStruct(0, pitchOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} yawOffset
 */
rlbot.flat.RotatorPartial.addYaw = function(builder, yawOffset) {
  builder.addFieldStruct(1, yawOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rollOffset
 */
rlbot.flat.RotatorPartial.addRoll = function(builder, rollOffset) {
  builder.addFieldStruct(2, rollOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RotatorPartial.endRotatorPartial = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredPhysics = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredPhysics}
 */
rlbot.flat.DesiredPhysics.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics}
 */
rlbot.flat.DesiredPhysics.getRootAsDesiredPhysics = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredPhysics).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.RotatorPartial=} obj
 * @returns {rlbot.flat.RotatorPartial|null}
 */
rlbot.flat.DesiredPhysics.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.RotatorPartial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.angularVelocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredPhysics.startDesiredPhysics = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.DesiredPhysics.addLocation = function(builder, locationOffset) {
  builder.addFieldOffset(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.DesiredPhysics.addRotation = function(builder, rotationOffset) {
  builder.addFieldOffset(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.DesiredPhysics.addVelocity = function(builder, velocityOffset) {
  builder.addFieldOffset(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVelocityOffset
 */
rlbot.flat.DesiredPhysics.addAngularVelocity = function(builder, angularVelocityOffset) {
  builder.addFieldOffset(3, angularVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredPhysics.endDesiredPhysics = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredBallState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredBallState}
 */
rlbot.flat.DesiredBallState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredBallState=} obj
 * @returns {rlbot.flat.DesiredBallState}
 */
rlbot.flat.DesiredBallState.getRootAsDesiredBallState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredBallState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics|null}
 */
rlbot.flat.DesiredBallState.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredBallState.startDesiredBallState = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.DesiredBallState.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredBallState.endDesiredBallState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredCarState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredCarState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredCarState=} obj
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredCarState.getRootAsDesiredCarState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredCarState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics|null}
 */
rlbot.flat.DesiredCarState.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.DesiredCarState.prototype.boostAmount = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Bool=} obj
 * @returns {rlbot.flat.Bool|null}
 */
rlbot.flat.DesiredCarState.prototype.jumped = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Bool).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Bool=} obj
 * @returns {rlbot.flat.Bool|null}
 */
rlbot.flat.DesiredCarState.prototype.doubleJumped = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Bool).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredCarState.startDesiredCarState = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.DesiredCarState.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostAmountOffset
 */
rlbot.flat.DesiredCarState.addBoostAmount = function(builder, boostAmountOffset) {
  builder.addFieldStruct(1, boostAmountOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} jumpedOffset
 */
rlbot.flat.DesiredCarState.addJumped = function(builder, jumpedOffset) {
  builder.addFieldStruct(2, jumpedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} doubleJumpedOffset
 */
rlbot.flat.DesiredCarState.addDoubleJumped = function(builder, doubleJumpedOffset) {
  builder.addFieldStruct(3, doubleJumpedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredCarState.endDesiredCarState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredBoostState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredBoostState}
 */
rlbot.flat.DesiredBoostState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredBoostState=} obj
 * @returns {rlbot.flat.DesiredBoostState}
 */
rlbot.flat.DesiredBoostState.getRootAsDesiredBoostState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredBoostState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.DesiredBoostState.prototype.respawnTime = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredBoostState.startDesiredBoostState = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} respawnTimeOffset
 */
rlbot.flat.DesiredBoostState.addRespawnTime = function(builder, respawnTimeOffset) {
  builder.addFieldStruct(0, respawnTimeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredBoostState.endDesiredBoostState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredGameInfoState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredGameInfoState}
 */
rlbot.flat.DesiredGameInfoState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredGameInfoState=} obj
 * @returns {rlbot.flat.DesiredGameInfoState}
 */
rlbot.flat.DesiredGameInfoState.getRootAsDesiredGameInfoState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredGameInfoState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.DesiredGameInfoState.prototype.worldGravityZ = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.DesiredGameInfoState.prototype.gameSpeed = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Bool=} obj
 * @returns {rlbot.flat.Bool|null}
 */
rlbot.flat.DesiredGameInfoState.prototype.paused = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Bool).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Bool=} obj
 * @returns {rlbot.flat.Bool|null}
 */
rlbot.flat.DesiredGameInfoState.prototype.endMatch = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Bool).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredGameInfoState.startDesiredGameInfoState = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} worldGravityZOffset
 */
rlbot.flat.DesiredGameInfoState.addWorldGravityZ = function(builder, worldGravityZOffset) {
  builder.addFieldStruct(0, worldGravityZOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gameSpeedOffset
 */
rlbot.flat.DesiredGameInfoState.addGameSpeed = function(builder, gameSpeedOffset) {
  builder.addFieldStruct(1, gameSpeedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pausedOffset
 */
rlbot.flat.DesiredGameInfoState.addPaused = function(builder, pausedOffset) {
  builder.addFieldStruct(2, pausedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} endMatchOffset
 */
rlbot.flat.DesiredGameInfoState.addEndMatch = function(builder, endMatchOffset) {
  builder.addFieldStruct(3, endMatchOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameInfoState.endDesiredGameInfoState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A console command which we will try to execute inside Rocket League.
 * See https://github.com/RLBot/RLBot/wiki/Console-Commands for a list of known commands.
 *
 * @constructor
 */
rlbot.flat.ConsoleCommand = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ConsoleCommand}
 */
rlbot.flat.ConsoleCommand.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ConsoleCommand=} obj
 * @returns {rlbot.flat.ConsoleCommand}
 */
rlbot.flat.ConsoleCommand.getRootAsConsoleCommand = function(bb, obj) {
  return (obj || new rlbot.flat.ConsoleCommand).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.ConsoleCommand.prototype.command = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ConsoleCommand.startConsoleCommand = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} commandOffset
 */
rlbot.flat.ConsoleCommand.addCommand = function(builder, commandOffset) {
  builder.addFieldOffset(0, commandOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ConsoleCommand.endConsoleCommand = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredGameState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredGameState}
 */
rlbot.flat.DesiredGameState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredGameState=} obj
 * @returns {rlbot.flat.DesiredGameState}
 */
rlbot.flat.DesiredGameState.getRootAsDesiredGameState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredGameState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.DesiredBallState=} obj
 * @returns {rlbot.flat.DesiredBallState|null}
 */
rlbot.flat.DesiredGameState.prototype.ballState = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredBallState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {rlbot.flat.DesiredCarState=} obj
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredGameState.prototype.carStates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.DesiredCarState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.DesiredGameState.prototype.carStatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.DesiredBoostState=} obj
 * @returns {rlbot.flat.DesiredBoostState}
 */
rlbot.flat.DesiredGameState.prototype.boostStates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.DesiredBoostState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.DesiredGameState.prototype.boostStatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.DesiredGameInfoState=} obj
 * @returns {rlbot.flat.DesiredGameInfoState|null}
 */
rlbot.flat.DesiredGameState.prototype.gameInfoState = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.DesiredGameInfoState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {rlbot.flat.ConsoleCommand=} obj
 * @returns {rlbot.flat.ConsoleCommand}
 */
rlbot.flat.DesiredGameState.prototype.consoleCommands = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.ConsoleCommand).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.DesiredGameState.prototype.consoleCommandsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredGameState.startDesiredGameState = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballStateOffset
 */
rlbot.flat.DesiredGameState.addBallState = function(builder, ballStateOffset) {
  builder.addFieldOffset(0, ballStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} carStatesOffset
 */
rlbot.flat.DesiredGameState.addCarStates = function(builder, carStatesOffset) {
  builder.addFieldOffset(1, carStatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.createCarStatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.DesiredGameState.startCarStatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostStatesOffset
 */
rlbot.flat.DesiredGameState.addBoostStates = function(builder, boostStatesOffset) {
  builder.addFieldOffset(2, boostStatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.createBoostStatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.DesiredGameState.startBoostStatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gameInfoStateOffset
 */
rlbot.flat.DesiredGameState.addGameInfoState = function(builder, gameInfoStateOffset) {
  builder.addFieldOffset(3, gameInfoStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} consoleCommandsOffset
 */
rlbot.flat.DesiredGameState.addConsoleCommands = function(builder, consoleCommandsOffset) {
  builder.addFieldOffset(4, consoleCommandsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.createConsoleCommandsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.DesiredGameState.startConsoleCommandsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.endDesiredGameState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Color = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Color}
 */
rlbot.flat.Color.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color}
 */
rlbot.flat.Color.getRootAsColor = function(bb, obj) {
  return (obj || new rlbot.flat.Color).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.a = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.r = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.g = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.b = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Color.startColor = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} a
 */
rlbot.flat.Color.addA = function(builder, a) {
  builder.addFieldInt8(0, a, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 */
rlbot.flat.Color.addR = function(builder, r) {
  builder.addFieldInt8(1, r, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} g
 */
rlbot.flat.Color.addG = function(builder, g) {
  builder.addFieldInt8(2, g, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} b
 */
rlbot.flat.Color.addB = function(builder, b) {
  builder.addFieldInt8(3, b, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Color.endColor = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RenderMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RenderMessage=} obj
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderMessage.getRootAsRenderMessage = function(bb, obj) {
  return (obj || new rlbot.flat.RenderMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.RenderType}
 */
rlbot.flat.RenderMessage.prototype.renderType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.RenderType} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.RenderType.DrawLine2D;
};

/**
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color|null}
 */
rlbot.flat.RenderMessage.prototype.color = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Color).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RenderMessage.prototype.start = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RenderMessage.prototype.end = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns {number}
 */
rlbot.flat.RenderMessage.prototype.scaleX = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
};

/**
 * Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns {number}
 */
rlbot.flat.RenderMessage.prototype.scaleY = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.RenderMessage.prototype.text = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Rectangles can be filled or just outlines.
 *
 * @returns {boolean}
 */
rlbot.flat.RenderMessage.prototype.isFilled = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RenderMessage.startRenderMessage = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.RenderType} renderType
 */
rlbot.flat.RenderMessage.addRenderType = function(builder, renderType) {
  builder.addFieldInt8(0, renderType, rlbot.flat.RenderType.DrawLine2D);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorOffset
 */
rlbot.flat.RenderMessage.addColor = function(builder, colorOffset) {
  builder.addFieldOffset(1, colorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} startOffset
 */
rlbot.flat.RenderMessage.addStart = function(builder, startOffset) {
  builder.addFieldStruct(2, startOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} endOffset
 */
rlbot.flat.RenderMessage.addEnd = function(builder, endOffset) {
  builder.addFieldStruct(3, endOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} scaleX
 */
rlbot.flat.RenderMessage.addScaleX = function(builder, scaleX) {
  builder.addFieldInt32(4, scaleX, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} scaleY
 */
rlbot.flat.RenderMessage.addScaleY = function(builder, scaleY) {
  builder.addFieldInt32(5, scaleY, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textOffset
 */
rlbot.flat.RenderMessage.addText = function(builder, textOffset) {
  builder.addFieldOffset(6, textOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isFilled
 */
rlbot.flat.RenderMessage.addIsFilled = function(builder, isFilled) {
  builder.addFieldInt8(7, +isFilled, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderMessage.endRenderMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RenderGroup = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RenderGroup}
 */
rlbot.flat.RenderGroup.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RenderGroup=} obj
 * @returns {rlbot.flat.RenderGroup}
 */
rlbot.flat.RenderGroup.getRootAsRenderGroup = function(bb, obj) {
  return (obj || new rlbot.flat.RenderGroup).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.RenderMessage=} obj
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderGroup.prototype.renderMessages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RenderMessage).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.RenderGroup.prototype.renderMessagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The id of the render group
 *
 * @returns {number}
 */
rlbot.flat.RenderGroup.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RenderGroup.startRenderGroup = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} renderMessagesOffset
 */
rlbot.flat.RenderGroup.addRenderMessages = function(builder, renderMessagesOffset) {
  builder.addFieldOffset(0, renderMessagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderGroup.createRenderMessagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.RenderGroup.startRenderMessagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
rlbot.flat.RenderGroup.addId = function(builder, id) {
  builder.addFieldInt32(1, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderGroup.endRenderGroup = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.QuickChat = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.QuickChat}
 */
rlbot.flat.QuickChat.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.QuickChat=} obj
 * @returns {rlbot.flat.QuickChat}
 */
rlbot.flat.QuickChat.getRootAsQuickChat = function(bb, obj) {
  return (obj || new rlbot.flat.QuickChat).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.QuickChatSelection}
 */
rlbot.flat.QuickChat.prototype.quickChatSelection = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.QuickChatSelection} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.QuickChatSelection.Information_IGotIt;
};

/**
 * The index of the player that sent the quick chat
 *
 * @returns {number}
 */
rlbot.flat.QuickChat.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * True if the chat is team only false if everyone can see it.
 *
 * @returns {boolean}
 */
rlbot.flat.QuickChat.prototype.teamOnly = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
rlbot.flat.QuickChat.prototype.messageIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.QuickChat.prototype.timeStamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.QuickChat.startQuickChat = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.QuickChatSelection} quickChatSelection
 */
rlbot.flat.QuickChat.addQuickChatSelection = function(builder, quickChatSelection) {
  builder.addFieldInt8(0, quickChatSelection, rlbot.flat.QuickChatSelection.Information_IGotIt);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.QuickChat.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(1, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} teamOnly
 */
rlbot.flat.QuickChat.addTeamOnly = function(builder, teamOnly) {
  builder.addFieldInt8(2, +teamOnly, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} messageIndex
 */
rlbot.flat.QuickChat.addMessageIndex = function(builder, messageIndex) {
  builder.addFieldInt32(3, messageIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeStamp
 */
rlbot.flat.QuickChat.addTimeStamp = function(builder, timeStamp) {
  builder.addFieldFloat32(4, timeStamp, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.QuickChat.endQuickChat = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
rlbot.flat.QuickChat.finishQuickChatBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * A minimal version of player data, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
rlbot.flat.TinyPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyPlayer=} obj
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPlayer.getRootAsTinyPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.TinyPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyPlayer.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Rotator=} obj
 * @returns {rlbot.flat.Rotator|null}
 */
rlbot.flat.TinyPlayer.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyPlayer.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.TinyPlayer.prototype.hasWheelContact = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.TinyPlayer.prototype.isSupersonic = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPlayer.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPlayer.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyPlayer.startTinyPlayer = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.TinyPlayer.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.TinyPlayer.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.TinyPlayer.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} hasWheelContact
 */
rlbot.flat.TinyPlayer.addHasWheelContact = function(builder, hasWheelContact) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isSupersonic
 */
rlbot.flat.TinyPlayer.addIsSupersonic = function(builder, isSupersonic) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.TinyPlayer.addTeam = function(builder, team) {
  builder.addFieldInt32(5, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boost
 */
rlbot.flat.TinyPlayer.addBoost = function(builder, boost) {
  builder.addFieldInt32(6, boost, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPlayer.endTinyPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A minimal version of the ball, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
rlbot.flat.TinyBall = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyBall}
 */
rlbot.flat.TinyBall.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyBall=} obj
 * @returns {rlbot.flat.TinyBall}
 */
rlbot.flat.TinyBall.getRootAsTinyBall = function(bb, obj) {
  return (obj || new rlbot.flat.TinyBall).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyBall.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyBall.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyBall.startTinyBall = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.TinyBall.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.TinyBall.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(1, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyBall.endTinyBall = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A minimal version of the game tick packet, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
rlbot.flat.TinyPacket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyPacket}
 */
rlbot.flat.TinyPacket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyPacket=} obj
 * @returns {rlbot.flat.TinyPacket}
 */
rlbot.flat.TinyPacket.getRootAsTinyPacket = function(bb, obj) {
  return (obj || new rlbot.flat.TinyPacket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.TinyPlayer=} obj
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPacket.prototype.players = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.TinyPlayer).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPacket.prototype.playersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.TinyBall=} obj
 * @returns {rlbot.flat.TinyBall|null}
 */
rlbot.flat.TinyPacket.prototype.ball = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.TinyBall).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyPacket.startTinyPacket = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playersOffset
 */
rlbot.flat.TinyPacket.addPlayers = function(builder, playersOffset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPacket.createPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.TinyPacket.startPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballOffset
 */
rlbot.flat.TinyPacket.addBall = function(builder, ballOffset) {
  builder.addFieldOffset(1, ballOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPacket.endTinyPacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PredictionSlice = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PredictionSlice}
 */
rlbot.flat.PredictionSlice.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PredictionSlice=} obj
 * @returns {rlbot.flat.PredictionSlice}
 */
rlbot.flat.PredictionSlice.getRootAsPredictionSlice = function(bb, obj) {
  return (obj || new rlbot.flat.PredictionSlice).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The moment in game time that this prediction corresponds to.
 * This corresponds to 'secondsElapsed' in the GameInfo table.
 *
 * @returns {number}
 */
rlbot.flat.PredictionSlice.prototype.gameSeconds = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The predicted location and motion of the object.
 *
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics|null}
 */
rlbot.flat.PredictionSlice.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Physics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PredictionSlice.startPredictionSlice = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameSeconds
 */
rlbot.flat.PredictionSlice.addGameSeconds = function(builder, gameSeconds) {
  builder.addFieldFloat32(0, gameSeconds, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.PredictionSlice.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(1, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PredictionSlice.endPredictionSlice = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BallPrediction = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BallPrediction}
 */
rlbot.flat.BallPrediction.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BallPrediction=} obj
 * @returns {rlbot.flat.BallPrediction}
 */
rlbot.flat.BallPrediction.getRootAsBallPrediction = function(bb, obj) {
  return (obj || new rlbot.flat.BallPrediction).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * A list of places the ball will be at specific times in the future.
 * It is guaranteed to sorted so that time increases with each slice.
 * It is NOT guaranteed to have a consistent amount of time between slices.
 *
 * @param {number} index
 * @param {rlbot.flat.PredictionSlice=} obj
 * @returns {rlbot.flat.PredictionSlice}
 */
rlbot.flat.BallPrediction.prototype.slices = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PredictionSlice).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.BallPrediction.prototype.slicesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BallPrediction.startBallPrediction = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} slicesOffset
 */
rlbot.flat.BallPrediction.addSlices = function(builder, slicesOffset) {
  builder.addFieldOffset(0, slicesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BallPrediction.createSlicesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.BallPrediction.startSlicesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BallPrediction.endBallPrediction = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A bot controlled by the RLBot framework
 *
 * @constructor
 */
rlbot.flat.RLBotPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RLBotPlayer}
 */
rlbot.flat.RLBotPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RLBotPlayer=} obj
 * @returns {rlbot.flat.RLBotPlayer}
 */
rlbot.flat.RLBotPlayer.getRootAsRLBotPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.RLBotPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RLBotPlayer.startRLBotPlayer = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RLBotPlayer.endRLBotPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A normal human player
 *
 * @constructor
 */
rlbot.flat.HumanPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.HumanPlayer}
 */
rlbot.flat.HumanPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.HumanPlayer=} obj
 * @returns {rlbot.flat.HumanPlayer}
 */
rlbot.flat.HumanPlayer.getRootAsHumanPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.HumanPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.HumanPlayer.startHumanPlayer = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.HumanPlayer.endHumanPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A psyonix bot, e.g. All Star bot
 *
 * @constructor
 */
rlbot.flat.PsyonixBotPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PsyonixBotPlayer}
 */
rlbot.flat.PsyonixBotPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PsyonixBotPlayer=} obj
 * @returns {rlbot.flat.PsyonixBotPlayer}
 */
rlbot.flat.PsyonixBotPlayer.getRootAsPsyonixBotPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.PsyonixBotPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.PsyonixBotPlayer.prototype.botSkill = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PsyonixBotPlayer.startPsyonixBotPlayer = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} botSkill
 */
rlbot.flat.PsyonixBotPlayer.addBotSkill = function(builder, botSkill) {
  builder.addFieldFloat32(0, botSkill, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PsyonixBotPlayer.endPsyonixBotPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A player that Rocket League treats as human, e.g. has a dedicated camera and can do training mode,
 * but is actually controlled by a bot.
 *
 * @constructor
 */
rlbot.flat.PartyMemberBotPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PartyMemberBotPlayer}
 */
rlbot.flat.PartyMemberBotPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PartyMemberBotPlayer=} obj
 * @returns {rlbot.flat.PartyMemberBotPlayer}
 */
rlbot.flat.PartyMemberBotPlayer.getRootAsPartyMemberBotPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.PartyMemberBotPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PartyMemberBotPlayer.startPartyMemberBotPlayer = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PartyMemberBotPlayer.endPartyMemberBotPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The car type, color, and other aspects of the player's appearance.
 * See https://github.com/RLBot/RLBot/wiki/Bot-Customization
 *
 * @constructor
 */
rlbot.flat.PlayerLoadout = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerLoadout}
 */
rlbot.flat.PlayerLoadout.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerLoadout=} obj
 * @returns {rlbot.flat.PlayerLoadout}
 */
rlbot.flat.PlayerLoadout.getRootAsPlayerLoadout = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerLoadout).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.teamColorId = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.customColorId = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.carId = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.decalId = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.wheelsId = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.boostId = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.antennaId = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.hatId = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.paintFinishId = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.customFinishId = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.engineAudioId = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.trailsId = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerLoadout.prototype.goalExplosionId = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.LoadoutPaint=} obj
 * @returns {rlbot.flat.LoadoutPaint|null}
 */
rlbot.flat.PlayerLoadout.prototype.loadoutPaint = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? (obj || new rlbot.flat.LoadoutPaint).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * Sets the primary color of the car to the swatch that most closely matches the provided
 * RGB color value. If set, this overrides teamColorId.
 *
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color|null}
 */
rlbot.flat.PlayerLoadout.prototype.primaryColorLookup = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? (obj || new rlbot.flat.Color).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * Sets the secondary color of the car to the swatch that most closely matches the provided
 * RGB color value. If set, this overrides customColorId.
 *
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color|null}
 */
rlbot.flat.PlayerLoadout.prototype.secondaryColorLookup = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 34);
  return offset ? (obj || new rlbot.flat.Color).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerLoadout.startPlayerLoadout = function(builder) {
  builder.startObject(16);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamColorId
 */
rlbot.flat.PlayerLoadout.addTeamColorId = function(builder, teamColorId) {
  builder.addFieldInt32(0, teamColorId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} customColorId
 */
rlbot.flat.PlayerLoadout.addCustomColorId = function(builder, customColorId) {
  builder.addFieldInt32(1, customColorId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} carId
 */
rlbot.flat.PlayerLoadout.addCarId = function(builder, carId) {
  builder.addFieldInt32(2, carId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} decalId
 */
rlbot.flat.PlayerLoadout.addDecalId = function(builder, decalId) {
  builder.addFieldInt32(3, decalId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} wheelsId
 */
rlbot.flat.PlayerLoadout.addWheelsId = function(builder, wheelsId) {
  builder.addFieldInt32(4, wheelsId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boostId
 */
rlbot.flat.PlayerLoadout.addBoostId = function(builder, boostId) {
  builder.addFieldInt32(5, boostId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} antennaId
 */
rlbot.flat.PlayerLoadout.addAntennaId = function(builder, antennaId) {
  builder.addFieldInt32(6, antennaId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} hatId
 */
rlbot.flat.PlayerLoadout.addHatId = function(builder, hatId) {
  builder.addFieldInt32(7, hatId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} paintFinishId
 */
rlbot.flat.PlayerLoadout.addPaintFinishId = function(builder, paintFinishId) {
  builder.addFieldInt32(8, paintFinishId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} customFinishId
 */
rlbot.flat.PlayerLoadout.addCustomFinishId = function(builder, customFinishId) {
  builder.addFieldInt32(9, customFinishId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} engineAudioId
 */
rlbot.flat.PlayerLoadout.addEngineAudioId = function(builder, engineAudioId) {
  builder.addFieldInt32(10, engineAudioId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} trailsId
 */
rlbot.flat.PlayerLoadout.addTrailsId = function(builder, trailsId) {
  builder.addFieldInt32(11, trailsId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} goalExplosionId
 */
rlbot.flat.PlayerLoadout.addGoalExplosionId = function(builder, goalExplosionId) {
  builder.addFieldInt32(12, goalExplosionId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} loadoutPaintOffset
 */
rlbot.flat.PlayerLoadout.addLoadoutPaint = function(builder, loadoutPaintOffset) {
  builder.addFieldOffset(13, loadoutPaintOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} primaryColorLookupOffset
 */
rlbot.flat.PlayerLoadout.addPrimaryColorLookup = function(builder, primaryColorLookupOffset) {
  builder.addFieldOffset(14, primaryColorLookupOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} secondaryColorLookupOffset
 */
rlbot.flat.PlayerLoadout.addSecondaryColorLookup = function(builder, secondaryColorLookupOffset) {
  builder.addFieldOffset(15, secondaryColorLookupOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerLoadout.endPlayerLoadout = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Specification for 'painted' items. See https://github.com/RLBot/RLBot/wiki/Bot-Customization
 *
 * @constructor
 */
rlbot.flat.LoadoutPaint = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.LoadoutPaint}
 */
rlbot.flat.LoadoutPaint.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.LoadoutPaint=} obj
 * @returns {rlbot.flat.LoadoutPaint}
 */
rlbot.flat.LoadoutPaint.getRootAsLoadoutPaint = function(bb, obj) {
  return (obj || new rlbot.flat.LoadoutPaint).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.carPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.decalPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.wheelsPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.boostPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.antennaPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.hatPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.trailsPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.LoadoutPaint.prototype.goalExplosionPaintId = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.LoadoutPaint.startLoadoutPaint = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} carPaintId
 */
rlbot.flat.LoadoutPaint.addCarPaintId = function(builder, carPaintId) {
  builder.addFieldInt32(0, carPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} decalPaintId
 */
rlbot.flat.LoadoutPaint.addDecalPaintId = function(builder, decalPaintId) {
  builder.addFieldInt32(1, decalPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} wheelsPaintId
 */
rlbot.flat.LoadoutPaint.addWheelsPaintId = function(builder, wheelsPaintId) {
  builder.addFieldInt32(2, wheelsPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boostPaintId
 */
rlbot.flat.LoadoutPaint.addBoostPaintId = function(builder, boostPaintId) {
  builder.addFieldInt32(3, boostPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} antennaPaintId
 */
rlbot.flat.LoadoutPaint.addAntennaPaintId = function(builder, antennaPaintId) {
  builder.addFieldInt32(4, antennaPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} hatPaintId
 */
rlbot.flat.LoadoutPaint.addHatPaintId = function(builder, hatPaintId) {
  builder.addFieldInt32(5, hatPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} trailsPaintId
 */
rlbot.flat.LoadoutPaint.addTrailsPaintId = function(builder, trailsPaintId) {
  builder.addFieldInt32(6, trailsPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} goalExplosionPaintId
 */
rlbot.flat.LoadoutPaint.addGoalExplosionPaintId = function(builder, goalExplosionPaintId) {
  builder.addFieldInt32(7, goalExplosionPaintId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.LoadoutPaint.endLoadoutPaint = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PlayerConfiguration = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerConfiguration}
 */
rlbot.flat.PlayerConfiguration.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerConfiguration=} obj
 * @returns {rlbot.flat.PlayerConfiguration}
 */
rlbot.flat.PlayerConfiguration.getRootAsPlayerConfiguration = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerConfiguration).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.PlayerClass}
 */
rlbot.flat.PlayerConfiguration.prototype.varietyType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.PlayerClass} */ (this.bb.readUint8(this.bb_pos + offset)) : rlbot.flat.PlayerClass.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
rlbot.flat.PlayerConfiguration.prototype.variety = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.PlayerConfiguration.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerConfiguration.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.PlayerLoadout=} obj
 * @returns {rlbot.flat.PlayerLoadout|null}
 */
rlbot.flat.PlayerConfiguration.prototype.loadout = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.PlayerLoadout).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * In the case where the requested player index is not available, spawnId will help
 * the framework figure out what index was actually assigned to this player instead.
 *
 * @returns {number}
 */
rlbot.flat.PlayerConfiguration.prototype.spawnId = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerConfiguration.startPlayerConfiguration = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.PlayerClass} varietyType
 */
rlbot.flat.PlayerConfiguration.addVarietyType = function(builder, varietyType) {
  builder.addFieldInt8(0, varietyType, rlbot.flat.PlayerClass.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} varietyOffset
 */
rlbot.flat.PlayerConfiguration.addVariety = function(builder, varietyOffset) {
  builder.addFieldOffset(1, varietyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
rlbot.flat.PlayerConfiguration.addName = function(builder, nameOffset) {
  builder.addFieldOffset(2, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.PlayerConfiguration.addTeam = function(builder, team) {
  builder.addFieldInt32(3, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} loadoutOffset
 */
rlbot.flat.PlayerConfiguration.addLoadout = function(builder, loadoutOffset) {
  builder.addFieldOffset(4, loadoutOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} spawnId
 */
rlbot.flat.PlayerConfiguration.addSpawnId = function(builder, spawnId) {
  builder.addFieldInt32(5, spawnId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerConfiguration.endPlayerConfiguration = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.MutatorSettings = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.MutatorSettings}
 */
rlbot.flat.MutatorSettings.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.MutatorSettings=} obj
 * @returns {rlbot.flat.MutatorSettings}
 */
rlbot.flat.MutatorSettings.getRootAsMutatorSettings = function(bb, obj) {
  return (obj || new rlbot.flat.MutatorSettings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.MatchLength}
 */
rlbot.flat.MutatorSettings.prototype.matchLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.MatchLength} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.MatchLength.Five_Minutes;
};

/**
 * @returns {rlbot.flat.MaxScore}
 */
rlbot.flat.MutatorSettings.prototype.maxScore = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {rlbot.flat.MaxScore} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.MaxScore.Unlimited;
};

/**
 * @returns {rlbot.flat.OvertimeOption}
 */
rlbot.flat.MutatorSettings.prototype.overtimeOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {rlbot.flat.OvertimeOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.OvertimeOption.Unlimited;
};

/**
 * @returns {rlbot.flat.SeriesLengthOption}
 */
rlbot.flat.MutatorSettings.prototype.seriesLengthOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {rlbot.flat.SeriesLengthOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.SeriesLengthOption.Unlimited;
};

/**
 * @returns {rlbot.flat.GameSpeedOption}
 */
rlbot.flat.MutatorSettings.prototype.gameSpeedOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {rlbot.flat.GameSpeedOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.GameSpeedOption.Default;
};

/**
 * @returns {rlbot.flat.BallMaxSpeedOption}
 */
rlbot.flat.MutatorSettings.prototype.ballMaxSpeedOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? /** @type {rlbot.flat.BallMaxSpeedOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BallMaxSpeedOption.Default;
};

/**
 * @returns {rlbot.flat.BallTypeOption}
 */
rlbot.flat.MutatorSettings.prototype.ballTypeOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? /** @type {rlbot.flat.BallTypeOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BallTypeOption.Default;
};

/**
 * @returns {rlbot.flat.BallWeightOption}
 */
rlbot.flat.MutatorSettings.prototype.ballWeightOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? /** @type {rlbot.flat.BallWeightOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BallWeightOption.Default;
};

/**
 * @returns {rlbot.flat.BallSizeOption}
 */
rlbot.flat.MutatorSettings.prototype.ballSizeOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? /** @type {rlbot.flat.BallSizeOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BallSizeOption.Default;
};

/**
 * @returns {rlbot.flat.BallBouncinessOption}
 */
rlbot.flat.MutatorSettings.prototype.ballBouncinessOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? /** @type {rlbot.flat.BallBouncinessOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BallBouncinessOption.Default;
};

/**
 * @returns {rlbot.flat.BoostOption}
 */
rlbot.flat.MutatorSettings.prototype.boostOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? /** @type {rlbot.flat.BoostOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BoostOption.Normal_Boost;
};

/**
 * @returns {rlbot.flat.RumbleOption}
 */
rlbot.flat.MutatorSettings.prototype.rumbleOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? /** @type {rlbot.flat.RumbleOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.RumbleOption.No_Rumble;
};

/**
 * @returns {rlbot.flat.BoostStrengthOption}
 */
rlbot.flat.MutatorSettings.prototype.boostStrengthOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? /** @type {rlbot.flat.BoostStrengthOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.BoostStrengthOption.One;
};

/**
 * @returns {rlbot.flat.GravityOption}
 */
rlbot.flat.MutatorSettings.prototype.gravityOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? /** @type {rlbot.flat.GravityOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.GravityOption.Default;
};

/**
 * @returns {rlbot.flat.DemolishOption}
 */
rlbot.flat.MutatorSettings.prototype.demolishOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? /** @type {rlbot.flat.DemolishOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.DemolishOption.Default;
};

/**
 * @returns {rlbot.flat.RespawnTimeOption}
 */
rlbot.flat.MutatorSettings.prototype.respawnTimeOption = function() {
  var offset = this.bb.__offset(this.bb_pos, 34);
  return offset ? /** @type {rlbot.flat.RespawnTimeOption} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.RespawnTimeOption.Three_Seconds;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.MutatorSettings.startMutatorSettings = function(builder) {
  builder.startObject(16);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.MatchLength} matchLength
 */
rlbot.flat.MutatorSettings.addMatchLength = function(builder, matchLength) {
  builder.addFieldInt8(0, matchLength, rlbot.flat.MatchLength.Five_Minutes);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.MaxScore} maxScore
 */
rlbot.flat.MutatorSettings.addMaxScore = function(builder, maxScore) {
  builder.addFieldInt8(1, maxScore, rlbot.flat.MaxScore.Unlimited);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.OvertimeOption} overtimeOption
 */
rlbot.flat.MutatorSettings.addOvertimeOption = function(builder, overtimeOption) {
  builder.addFieldInt8(2, overtimeOption, rlbot.flat.OvertimeOption.Unlimited);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.SeriesLengthOption} seriesLengthOption
 */
rlbot.flat.MutatorSettings.addSeriesLengthOption = function(builder, seriesLengthOption) {
  builder.addFieldInt8(3, seriesLengthOption, rlbot.flat.SeriesLengthOption.Unlimited);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.GameSpeedOption} gameSpeedOption
 */
rlbot.flat.MutatorSettings.addGameSpeedOption = function(builder, gameSpeedOption) {
  builder.addFieldInt8(4, gameSpeedOption, rlbot.flat.GameSpeedOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BallMaxSpeedOption} ballMaxSpeedOption
 */
rlbot.flat.MutatorSettings.addBallMaxSpeedOption = function(builder, ballMaxSpeedOption) {
  builder.addFieldInt8(5, ballMaxSpeedOption, rlbot.flat.BallMaxSpeedOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BallTypeOption} ballTypeOption
 */
rlbot.flat.MutatorSettings.addBallTypeOption = function(builder, ballTypeOption) {
  builder.addFieldInt8(6, ballTypeOption, rlbot.flat.BallTypeOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BallWeightOption} ballWeightOption
 */
rlbot.flat.MutatorSettings.addBallWeightOption = function(builder, ballWeightOption) {
  builder.addFieldInt8(7, ballWeightOption, rlbot.flat.BallWeightOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BallSizeOption} ballSizeOption
 */
rlbot.flat.MutatorSettings.addBallSizeOption = function(builder, ballSizeOption) {
  builder.addFieldInt8(8, ballSizeOption, rlbot.flat.BallSizeOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BallBouncinessOption} ballBouncinessOption
 */
rlbot.flat.MutatorSettings.addBallBouncinessOption = function(builder, ballBouncinessOption) {
  builder.addFieldInt8(9, ballBouncinessOption, rlbot.flat.BallBouncinessOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BoostOption} boostOption
 */
rlbot.flat.MutatorSettings.addBoostOption = function(builder, boostOption) {
  builder.addFieldInt8(10, boostOption, rlbot.flat.BoostOption.Normal_Boost);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.RumbleOption} rumbleOption
 */
rlbot.flat.MutatorSettings.addRumbleOption = function(builder, rumbleOption) {
  builder.addFieldInt8(11, rumbleOption, rlbot.flat.RumbleOption.No_Rumble);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.BoostStrengthOption} boostStrengthOption
 */
rlbot.flat.MutatorSettings.addBoostStrengthOption = function(builder, boostStrengthOption) {
  builder.addFieldInt8(12, boostStrengthOption, rlbot.flat.BoostStrengthOption.One);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.GravityOption} gravityOption
 */
rlbot.flat.MutatorSettings.addGravityOption = function(builder, gravityOption) {
  builder.addFieldInt8(13, gravityOption, rlbot.flat.GravityOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.DemolishOption} demolishOption
 */
rlbot.flat.MutatorSettings.addDemolishOption = function(builder, demolishOption) {
  builder.addFieldInt8(14, demolishOption, rlbot.flat.DemolishOption.Default);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.RespawnTimeOption} respawnTimeOption
 */
rlbot.flat.MutatorSettings.addRespawnTimeOption = function(builder, respawnTimeOption) {
  builder.addFieldInt8(15, respawnTimeOption, rlbot.flat.RespawnTimeOption.Three_Seconds);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.MutatorSettings.endMutatorSettings = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.MatchSettings = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.MatchSettings}
 */
rlbot.flat.MatchSettings.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.MatchSettings=} obj
 * @returns {rlbot.flat.MatchSettings}
 */
rlbot.flat.MatchSettings.getRootAsMatchSettings = function(bb, obj) {
  return (obj || new rlbot.flat.MatchSettings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.PlayerConfiguration=} obj
 * @returns {rlbot.flat.PlayerConfiguration}
 */
rlbot.flat.MatchSettings.prototype.playerConfigurations = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PlayerConfiguration).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.MatchSettings.prototype.playerConfigurationsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {rlbot.flat.GameMode}
 */
rlbot.flat.MatchSettings.prototype.gameMode = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {rlbot.flat.GameMode} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.GameMode.Soccer;
};

/**
 * @returns {rlbot.flat.GameMap}
 */
rlbot.flat.MatchSettings.prototype.gameMap = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {rlbot.flat.GameMap} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.GameMap.DFHStadium;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.skipReplays = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.instantStart = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {rlbot.flat.MutatorSettings=} obj
 * @returns {rlbot.flat.MutatorSettings|null}
 */
rlbot.flat.MatchSettings.prototype.mutatorSettings = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new rlbot.flat.MutatorSettings).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {rlbot.flat.ExistingMatchBehavior}
 */
rlbot.flat.MatchSettings.prototype.existingMatchBehavior = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? /** @type {rlbot.flat.ExistingMatchBehavior} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.ExistingMatchBehavior.Restart_If_Different;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.enableLockstep = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.enableRendering = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.enableStateSetting = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.MatchSettings.prototype.autoSaveReplay = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.MatchSettings.startMatchSettings = function(builder) {
  builder.startObject(11);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playerConfigurationsOffset
 */
rlbot.flat.MatchSettings.addPlayerConfigurations = function(builder, playerConfigurationsOffset) {
  builder.addFieldOffset(0, playerConfigurationsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.MatchSettings.createPlayerConfigurationsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.MatchSettings.startPlayerConfigurationsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.GameMode} gameMode
 */
rlbot.flat.MatchSettings.addGameMode = function(builder, gameMode) {
  builder.addFieldInt8(1, gameMode, rlbot.flat.GameMode.Soccer);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.GameMap} gameMap
 */
rlbot.flat.MatchSettings.addGameMap = function(builder, gameMap) {
  builder.addFieldInt8(2, gameMap, rlbot.flat.GameMap.DFHStadium);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} skipReplays
 */
rlbot.flat.MatchSettings.addSkipReplays = function(builder, skipReplays) {
  builder.addFieldInt8(3, +skipReplays, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} instantStart
 */
rlbot.flat.MatchSettings.addInstantStart = function(builder, instantStart) {
  builder.addFieldInt8(4, +instantStart, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mutatorSettingsOffset
 */
rlbot.flat.MatchSettings.addMutatorSettings = function(builder, mutatorSettingsOffset) {
  builder.addFieldOffset(5, mutatorSettingsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.ExistingMatchBehavior} existingMatchBehavior
 */
rlbot.flat.MatchSettings.addExistingMatchBehavior = function(builder, existingMatchBehavior) {
  builder.addFieldInt8(6, existingMatchBehavior, rlbot.flat.ExistingMatchBehavior.Restart_If_Different);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} enableLockstep
 */
rlbot.flat.MatchSettings.addEnableLockstep = function(builder, enableLockstep) {
  builder.addFieldInt8(7, +enableLockstep, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} enableRendering
 */
rlbot.flat.MatchSettings.addEnableRendering = function(builder, enableRendering) {
  builder.addFieldInt8(8, +enableRendering, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} enableStateSetting
 */
rlbot.flat.MatchSettings.addEnableStateSetting = function(builder, enableStateSetting) {
  builder.addFieldInt8(9, +enableStateSetting, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} autoSaveReplay
 */
rlbot.flat.MatchSettings.addAutoSaveReplay = function(builder, autoSaveReplay) {
  builder.addFieldInt8(10, +autoSaveReplay, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.MatchSettings.endMatchSettings = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.QuickChatMessages = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.QuickChatMessages}
 */
rlbot.flat.QuickChatMessages.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.QuickChatMessages=} obj
 * @returns {rlbot.flat.QuickChatMessages}
 */
rlbot.flat.QuickChatMessages.getRootAsQuickChatMessages = function(bb, obj) {
  return (obj || new rlbot.flat.QuickChatMessages).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.QuickChat=} obj
 * @returns {rlbot.flat.QuickChat}
 */
rlbot.flat.QuickChatMessages.prototype.messages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.QuickChat).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.QuickChatMessages.prototype.messagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.QuickChatMessages.startQuickChatMessages = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messagesOffset
 */
rlbot.flat.QuickChatMessages.addMessages = function(builder, messagesOffset) {
  builder.addFieldOffset(0, messagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.QuickChatMessages.createMessagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.QuickChatMessages.startMessagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.QuickChatMessages.endQuickChatMessages = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Sent when connecting to RLBot to indicate what type of messages are desired.
 * This could be sent by a bot, or a bot manager governing several bots, an
 * overlay, or any other utility that connects to the RLBot process.
 *
 * @constructor
 */
rlbot.flat.ReadyMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ReadyMessage}
 */
rlbot.flat.ReadyMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ReadyMessage=} obj
 * @returns {rlbot.flat.ReadyMessage}
 */
rlbot.flat.ReadyMessage.getRootAsReadyMessage = function(bb, obj) {
  return (obj || new rlbot.flat.ReadyMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {boolean}
 */
rlbot.flat.ReadyMessage.prototype.wantsBallPredictions = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.ReadyMessage.prototype.wantsQuickChat = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.ReadyMessage.prototype.wantsGameMessages = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ReadyMessage.startReadyMessage = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} wantsBallPredictions
 */
rlbot.flat.ReadyMessage.addWantsBallPredictions = function(builder, wantsBallPredictions) {
  builder.addFieldInt8(0, +wantsBallPredictions, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} wantsQuickChat
 */
rlbot.flat.ReadyMessage.addWantsQuickChat = function(builder, wantsQuickChat) {
  builder.addFieldInt8(1, +wantsQuickChat, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} wantsGameMessages
 */
rlbot.flat.ReadyMessage.addWantsGameMessages = function(builder, wantsGameMessages) {
  builder.addFieldInt8(2, +wantsGameMessages, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ReadyMessage.endReadyMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Notification that a player triggers some in-game event, such as:
 *		Win, Loss, TimePlayed;
 *		Shot, Assist, Center, Clear, PoolShot;
 *		Goal, AerialGoal, BicycleGoal, BulletGoal, BackwardsGoal, LongGoal, OvertimeGoal, TurtleGoal;
 *		AerialHit, BicycleHit, BulletHit, JuggleHit, FirstTouch, BallHit;
 *		Save, EpicSave, FreezeSave;
 *		HatTrick, Savior, Playmaker, MVP;
 *		FastestGoal, SlowestGoal, FurthestGoal, OwnGoal;
 *		MostBallTouches, FewestBallTouches, MostBoostPickups, FewestBoostPickups, BoostPickups;
 *		CarTouches, Demolition, Demolish;
 *		LowFive, HighFive;
 *
 * @constructor
 */
rlbot.flat.PlayerStatEvent = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerStatEvent}
 */
rlbot.flat.PlayerStatEvent.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerStatEvent=} obj
 * @returns {rlbot.flat.PlayerStatEvent}
 */
rlbot.flat.PlayerStatEvent.getRootAsPlayerStatEvent = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerStatEvent).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * index of the player associated with the event
 *
 * @returns {number}
 */
rlbot.flat.PlayerStatEvent.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * Event type
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.PlayerStatEvent.prototype.statType = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerStatEvent.startPlayerStatEvent = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.PlayerStatEvent.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} statTypeOffset
 */
rlbot.flat.PlayerStatEvent.addStatType = function(builder, statTypeOffset) {
  builder.addFieldOffset(1, statTypeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerStatEvent.endPlayerStatEvent = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Notification when the local player is spectating another player.
 *
 * @constructor
 */
rlbot.flat.PlayerSpectate = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerSpectate}
 */
rlbot.flat.PlayerSpectate.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerSpectate=} obj
 * @returns {rlbot.flat.PlayerSpectate}
 */
rlbot.flat.PlayerSpectate.getRootAsPlayerSpectate = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerSpectate).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * index of the player that is being spectated. Will be -1 if not spectating anyone.
 *
 * @returns {number}
 */
rlbot.flat.PlayerSpectate.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerSpectate.startPlayerSpectate = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.PlayerSpectate.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerSpectate.endPlayerSpectate = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Rocket League is notifying us that some player has moved their controller. This is an *output*
 *
 * @constructor
 */
rlbot.flat.PlayerInputChange = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerInputChange}
 */
rlbot.flat.PlayerInputChange.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerInputChange=} obj
 * @returns {rlbot.flat.PlayerInputChange}
 */
rlbot.flat.PlayerInputChange.getRootAsPlayerInputChange = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerInputChange).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInputChange.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState|null}
 */
rlbot.flat.PlayerInputChange.prototype.controllerState = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInputChange.prototype.dodgeForward = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInputChange.prototype.dodgeRight = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerInputChange.startPlayerInputChange = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.PlayerInputChange.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controllerStateOffset
 */
rlbot.flat.PlayerInputChange.addControllerState = function(builder, controllerStateOffset) {
  builder.addFieldOffset(1, controllerStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dodgeForward
 */
rlbot.flat.PlayerInputChange.addDodgeForward = function(builder, dodgeForward) {
  builder.addFieldFloat32(2, dodgeForward, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dodgeRight
 */
rlbot.flat.PlayerInputChange.addDodgeRight = function(builder, dodgeRight) {
  builder.addFieldFloat32(3, dodgeRight, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerInputChange.endPlayerInputChange = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GameMessageWrapper = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GameMessageWrapper}
 */
rlbot.flat.GameMessageWrapper.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GameMessageWrapper=} obj
 * @returns {rlbot.flat.GameMessageWrapper}
 */
rlbot.flat.GameMessageWrapper.getRootAsGameMessageWrapper = function(bb, obj) {
  return (obj || new rlbot.flat.GameMessageWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.GameMessage}
 */
rlbot.flat.GameMessageWrapper.prototype.MessageType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.GameMessage} */ (this.bb.readUint8(this.bb_pos + offset)) : rlbot.flat.GameMessage.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
rlbot.flat.GameMessageWrapper.prototype.Message = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GameMessageWrapper.startGameMessageWrapper = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.GameMessage} MessageType
 */
rlbot.flat.GameMessageWrapper.addMessageType = function(builder, MessageType) {
  builder.addFieldInt8(0, MessageType, rlbot.flat.GameMessage.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} MessageOffset
 */
rlbot.flat.GameMessageWrapper.addMessage = function(builder, MessageOffset) {
  builder.addFieldOffset(1, MessageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameMessageWrapper.endGameMessageWrapper = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * We have some very small messages that are only a few bytes but potentially sent at high frequency.
 * Bundle them into a packet to reduce the overhead of sending data over TCP.
 *
 * @constructor
 */
rlbot.flat.MessagePacket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.MessagePacket}
 */
rlbot.flat.MessagePacket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.MessagePacket=} obj
 * @returns {rlbot.flat.MessagePacket}
 */
rlbot.flat.MessagePacket.getRootAsMessagePacket = function(bb, obj) {
  return (obj || new rlbot.flat.MessagePacket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.GameMessageWrapper=} obj
 * @returns {rlbot.flat.GameMessageWrapper}
 */
rlbot.flat.MessagePacket.prototype.messages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.GameMessageWrapper).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.MessagePacket.prototype.messagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.MessagePacket.prototype.gameSeconds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.MessagePacket.prototype.frameNum = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.MessagePacket.startMessagePacket = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messagesOffset
 */
rlbot.flat.MessagePacket.addMessages = function(builder, messagesOffset) {
  builder.addFieldOffset(0, messagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.MessagePacket.createMessagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.MessagePacket.startMessagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameSeconds
 */
rlbot.flat.MessagePacket.addGameSeconds = function(builder, gameSeconds) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} frameNum
 */
rlbot.flat.MessagePacket.addFrameNum = function(builder, frameNum) {
  builder.addFieldInt32(2, frameNum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.MessagePacket.endMessagePacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.rlbot = rlbot;
